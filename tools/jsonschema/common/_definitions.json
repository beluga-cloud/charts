{
  "$schema": "http://json-schema.org/draft-07/schema",
  "definitions": {
    "io.belugapps.v1.GlobalValues": {
      "description": "Global values that can be accessed from any chart or subchart by exactly the same name.",
      "properties": {
        "commonLabels": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta/definitions/Labels"
        },
        "debug": {
          "description": "Enable the debugging mode on all workloads.",
          "type": "boolean"
        },
        "imagePullSecrets": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec/definitions/ImagePullSecrets"
        },
        "imageRegistry": {
          "description": "Container registry image name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.belugapps.v1.HelmValues": {
      "properties": {
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
        },
        "containerSecurityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
        },
        "fullnameOverride": {
          "description": "String to fully override `common.names.fullname` template.",
          "type": "string"
        },
        "global": {
          "$ref": "#/definitions/io.belugapps.v1.GlobalValues"
        },
        "images": {
          "$ref": "#/definitions/io.belugapps.v1.Images"
        },
        "ingress": {
          "$ref": "#/definitions/io.belugapps.v1.Ingress"
        },
        "nameOverride": {
          "description": "String to partially override `common.names.fullname` template (will maintain the release name).",
          "type": "string"
        },
        "networkPolicy": {
          "$ref": "#/definitions/io.belugapps.v1.NetworkPolicy"
        },
        "nodeSelector": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec/definitions/NodeSelector"
        },
        "persistence": {
          "$ref": "#/definitions/io.belugapps.v1.PersistentStorage"
        },
        "podAnnotations": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta/definitions/Annotations"
        },
        "podLabels": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta/definitions/Labels"
        },
        "podSecurityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
        },
        "replicaCount": {
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
          "format": "int32",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
          },
          "description": "Compute Resources required by containers. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object"
        },
        "service": {
          "$ref": "#/definitions/io.belugapps.v1.Service"
        },
        "strategy": {
          "anyOf": [
            {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy"
            },
            {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy"
            },
            {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy"
            }
          ]
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.belugapps.v1.Images": {
      "additionalProperties": {
        "properties": {
          "digest": {
            "description": "Digest, is a unique, immutable identifier for a container image to deploy. (docker.io/bitnami/kubectl:1.26.1@[SHA256:147F89C260A0F5551052B04C86CB91C9AF10338CF3E628F74BBAE2527CA4AEC4]).",
            "type": "string"
          },
          "pullPolicy": {
            "description": "Container registry name.",
            "enum": [
              "Always",
              "Never",
              "IfNotPresent"
            ],
            "type": "string"
          },
          "registry": {
            "description": "Repository —or collection of repositories— used to store and access container images. ([DOCKER.IO]/bitnami/kubectl:1.26.1@sha256:147f89c260a0f5551052b04c86cb91c9af10338cf3e628f74bbae2527ca4aec4).",
            "type": "string"
          },
          "repository": {
            "description": "Collection of related container images that provide different versions of an application. (docker.io/[BITNAMI/KUBECTL]:1.26.1@sha256:147f89c260a0f5551052b04c86cb91c9af10338cf3e628f74bbae2527ca4aec4).",
            "type": "string"
          },
          "tag": {
            "description": "tags are just an alias for an image ID. The tag's name must be an ASCII character string and may include lowercase and uppercase letters, digits, underscores, periods, and dashes. (docker.io/bitnami/kubectl:[1.26.1]@sha256:147f89c260a0f5551052b04c86cb91c9af10338cf3e628f74bbae2527ca4aec4).",
            "type": "string"
          }
        },
        "required": [
          "repository"
        ],
        "type": "object"
      },
      "description": "Container image definitions that can be used to manage container `image` in a \"lego-style\".",
      "type": "object"
    },
    "io.belugapps.v1.Ingress": {
      "description": "Ingress that expose the packaged application outside the cluster.",
      "oneOf": [
        {
          "properties": {
            "enabled": {
              "const": true
            }
          },
          "required": [
            "hostname"
          ]
        },
        {
          "properties": {
            "enabled": {
              "const": false
            }
          }
        }
      ],
      "properties": {
        "annotations": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta/definitions/Annotations"
        },
        "enabled": {
          "description": "Whether the ingress should be deployed or not.",
          "type": "boolean"
        },
        "extraHosts": {
          "description": "List of additional hostname to be covered with this ingress record.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "extraPaths": {
          "description": "List of additional paths that may need to be added to the ingress under the main host.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressPath"
          },
          "type": "array"
        },
        "extraRules": {
          "description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressRule"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "extraTls": {
          "description": "TLS configuration for additional hostnames to be covered with this ingress record.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressTLS"
          },
          "type": "array"
        },
        "hostname": {
          "description": "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986:\n  1. IPs are not allowed. Currently an IngressRuleValue can only apply to the IP in the Spec of the parent Ingress.\n  2. The `:` delimiter is not respected because ports are not allowed.\n\nHost can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.\n",
          "type": "string"
        },
        "ingressClassName": {
          "description": "IngressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.",
          "type": "string"
        },
        "path": {
          "description": "Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\".",
          "type": "string"
        },
        "pathType": {
          "description": "PathType determines the interpretation of the Path matching. PathType can be one of the following values:\n  * Exact: Matches the URL path exactly.\n  * Prefix: Matches based on a URL path prefix split by '/'. Matching is done on a path element by element basis. A path element refers is the list of labels in the path split by the '/' separator. A request is a  match for path p if every p is an element-wise prefix of p of the  request path. Note that if the last element of the path is a substring  of the last element in request path, it is not a match (e.g. /foo/bar  matches /foo/bar/baz, but does not match /foo/barbaz).\n  * ImplementationSpecific: Interpretation of the Path matching is up to  the IngressClass. Implementations can treat this as a separate PathType  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types.\n",
          "type": "string"
        },
        "tls": {
          "description": "Whether the ingress should be configured with TLS or not.",
          "type": "boolean"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "io.belugapps.v1.NetworkPolicy": {
      "description": "Specification of what network traffic is allowed for the packaged application",
      "properties": {
        "allowAllOutbound": {
          "description": "Whether to allow all outbound traffic by default.",
          "type": "boolean"
        },
        "allowExternal": {
          "description": "Don't require client label for connections.",
          "type": "boolean"
        },
        "egress": {
          "description": "List of egress rules to be applied to the application. Outgoing traffic is allowed if there are no NetworkPolicies selecting the application (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the application. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default)",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyEgressRule"
          },
          "type": "array"
        },
        "enabled": {
          "description": "Whether the network policy should be deployed or not.",
          "type": "boolean"
        },
        "ingress": {
          "description": "List of ingress rules to be applied to the application. Traffic is allowed to a pod if there are no NetworkPolicies selecting the application (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the application. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyIngressRule"
          },
          "type": "array"
        }
      }
    },
    "io.belugapps.v1.PersistentStorage": {
      "additionalProperties": {
        "description": "Volume on which to set persistence",
        "properties": {
          "annotations": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta/definitions/Annotations"
          },
          "enabled": {
            "description": "Whether this volume should be persistent or not.",
            "type": "boolean"
          },
          "volumeClaimSpec": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec",
            "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
          }
        },
        "type": "object"
      },
      "description": "Configure the persistence of the application's volume.",
      "type": "object"
    },
    "io.belugapps.v1.Service": {
      "additionalProperties": {
        "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort",
        "description": "Named port that contains information on service's port.",
        "not": {
          "required": [
            "name"
          ]
        }
      },
      "description": "Service that expose the packaged application inside or outside the cluster.",
      "properties": {
        "annotations": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta/definitions/Annotations"
        },
        "clusterIP": {
          "description": "clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "string"
        },
        "externalTrafficPolicy": {
          "description": "externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's \"externally-facing\" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to \"Local\", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get \"Cluster\" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.",
          "type": "string"
        },
        "loadBalancerIP": {
          "description": "Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.",
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetUpdateStrategy": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy"
    },
    "io.k8s.api.apps.v1.DeploymentStrategy": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.apps.v1.DeploymentStrategy"
    },
    "io.k8s.api.apps.v1.StatefulSetUpdateStrategy": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy"
    },
    "io.k8s.api.core.v1.Affinity": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.core.v1.Affinity"
    },
    "io.k8s.api.core.v1.LocalObjectReference": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.core.v1.LocalObjectReference"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimSpec": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec"
    },
    "io.k8s.api.core.v1.PodSecurityContext": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.core.v1.PodSecurityContext"
    },
    "io.k8s.api.core.v1.PodSpec": {
      "definitions": {
        "ImagePullSecrets": {
          "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "NodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object",
          "x-kubernetes-map-type": "atomic"
        }
      }
    },
    "io.k8s.api.core.v1.ResourceRequirements": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.core.v1.ResourceRequirements"
    },
    "io.k8s.api.core.v1.SecurityContext": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.core.v1.SecurityContext"
    },
    "io.k8s.api.core.v1.ServicePort": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.core.v1.ServicePort"
    },
    "io.k8s.api.core.v1.Toleration": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.core.v1.Toleration"
    },
    "io.k8s.api.core.v1.TopologySpreadConstraint": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
    },
    "io.k8s.api.networking.v1.HTTPIngressPath": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.networking.v1.HTTPIngressPath"
    },
    "io.k8s.api.networking.v1.IngressRule": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.networking.v1.IngressRule"
    },
    "io.k8s.api.networking.v1.IngressTLS": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.networking.v1.IngressTLS"
    },
    "io.k8s.api.networking.v1.NetworkPolicyEgressRule": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.networking.v1.NetworkPolicyEgressRule"
    },
    "io.k8s.api.networking.v1.NetworkPolicyIngressRule": {
      "$ref": "https://raw.githubusercontent.com/belug-apps/catalog/main/.json_schema/kubernetes/v1.26.1/_definitions.json#/definitions/io.k8s.api.networking.v1.NetworkPolicyIngressRule"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
      "definitions": {
        "Annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object"
        },
        "Labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object"
        }
      },
      "type": "object"
    }
  }
}
