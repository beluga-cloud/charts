---
name: Build OCI image (container)
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      containerfile:
        description: Containerfile which contains instructions for building the image
        required: true
        type: string
      platforms:
        description: List of OS/ARCH combo of the built image (coma separated)
        required: true
        type: string

      dry-run:
        default: false
        description: Whether to modify the OCI image or not
        type: boolean

    outputs:
      artifacts:
        description: JSON list of generated artifacts
        value: ${{ jobs.export.outputs.artifacts }}

jobs:
  # Extract following metadata from Containerfile
  #   - Image metadata (name, slug, version)
  #   - Context metadata (build context, output destination, platforms)
  #   - Another metadata required to build image (description, licenses, title, url)
  metadata:
    name: Extract Containerfile metadata (${{ inputs.containerfile }})
    outputs:
      image-name: ${{ steps.containerfile.outputs.image-name }}
      image-slug: ${{ steps.containerfile.outputs.image-slug }}
      image-version: ${{ steps.metadata.outputs.version }}

      description: ${{ steps.metadata.outputs.description }}
      licenses: ${{ steps.metadata.outputs.licenses }}
      title: ${{ steps.metadata.outputs.title }}
      url: ${{ steps.metadata.outputs.url }}
      version: ${{ steps.metadata.outputs.version }}

      build-context: ${{ steps.containerfile.outputs.context }}
      build-output-destination: ${{ steps.buildx.outputs.output }}
      build-platforms: ${{ steps.buildx.outputs.platforms }}
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 1

      - name: Extract metadata from 'org.opencontainers.image' labels
        id: metadata
        run: |
          set -u

          # Extract metadata from Containerfile labels
          function opencontainers_metadata {
            metadata="$(envsubst <"${CONTAINERFILE}" | grep "org.opencontainers.image.${1}" | cut -d= -f2 | tr -d '"')"
            if [[ -z "${metadata}" ]]; then
              echo "::error file=${CONTAINERFILE},title=Missing 'org.opencontainers.image.${1}' label::org.opencontainers.image.${1} label is required"
              exit 1
            fi
            echo "${1}=${metadata}" | tee --append "${GITHUB_OUTPUT}"
          }

          # Load all Dockerfile ARG as environment and substitute all vars in Dockerfile
          # to extract some information
          # shellcheck source=/dev/null
          source <(grep "^ARG" "${CONTAINERFILE}" | sed 's/ARG/export/g')
          
          opencontainers_metadata "title"
          opencontainers_metadata "description"
          opencontainers_metadata "version"
          opencontainers_metadata "url"
          opencontainers_metadata "licenses"
        env:
          CONTAINERFILE: ${{ inputs.containerfile }}

      - name: Extract metadata from Containerfile
        id: containerfile
        run: |
          set -euo pipefail
          
          (
            # - Extract build-context based on Containerfile location
            echo "context=$(dirname "${CONTAINERFILE}")"
          
            # - Extract image name from Containerfile location
            image_name="$(awk <<<"$(dirname "${CONTAINERFILE}")" -F[/] '{ printf "%s/%s", $2, $4 }')"
            echo "image-name=${image_name}"
            echo "image-slug=${image_name//\//_}"
          ) | tee "${GITHUB_OUTPUT}"
        env:
          CONTAINERFILE: ${{ inputs.containerfile }}

      - name: Generate `buildx` arguments
        id: buildx
        run: |
          set -euo pipefail
          
          (
            [[ "${{ inputs.dry-run }}" == "true" ]] \
              && echo "output=type=oci,dest=${{ steps.containerfile.outputs.image-slug }}.tar" \
              || echo "output=type=registry"
          
            echo "platforms=$(jq --null-input '"${{ inputs.platforms }}" | split(",") | map(split("/") | {os: first, arch: last})' --compact-output)"
          ) | tee "${GITHUB_OUTPUT}"

  build:
    name: Build '${{ needs.metadata.outputs.image-name }}:${{ needs.metadata.outputs.image-version }}' image (${{ matrix.platform.os }}/${{ matrix.platform.arch }})
    needs: [metadata]
    permissions:
      contents: read
      id-token: write
      packages: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.metadata.outputs.build-platforms) }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 1

      - uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0
      - uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
      - uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: metadata
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ needs.metadata.outputs.image-name }}
          flavor: |
            latest=false
          tags: |
            type=raw,value=${{ needs.metadata.outputs.image-version }}-${{ matrix.platform.arch }}-${{ matrix.platform.os }}
          labels: |
            com.github.beluga-cloud.ci.workflow.url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}/blob/${{ github.sha }}/${{ inputs.containerfile }}

      - uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        id: build
        with:
          context: ${{ needs.metadata.outputs.build-context }}
          file: ${{ inputs.containerfile }}
          labels: ${{ steps.metadata.outputs.labels }}
          outputs: ${{ needs.metadata.outputs.build-output-destination }}
          platforms: ${{ matrix.platform.os }}/${{ matrix.platform.arch }}
          provenance: false
          tags: ${{ steps.metadata.outputs.tags }}
      - name: Remove sha256 prefix on '${{ steps.build.outputs.digest }}'
        id: format-digest
        run: echo "digest=${DIGEST#sha256:}" | tee --append "${GITHUB_OUTPUT}"
        env:
          DIGEST: ${{ steps.build.outputs.digest }}

      # NOTE: on production mode, all images are signed
      - uses: sigstore/cosign-installer@11086d25041f77fe8fe7b9ea4e48e3b9192b8f19 # v3.1.2
        if: ${{ !inputs.dry-run }}
      - name: Sign 'ghcr.io/${{ github.repository_owner }}/${{ needs.metadata.outputs.image-name }}@${{ steps.build.outputs.digest }}' with GitHub OIDC Token
        if: ${{ !inputs.dry-run }}
        run: cosign sign --yes ghcr.io/${{ github.repository_owner }}/${{ needs.metadata.outputs.image-name }}@${{ steps.build.outputs.digest }}

      # NOTE: on dry-run mode, all images are exported as artifact
      - name: Rename OCI image artifact before upload
        if: ${{ inputs.dry-run }}
        run: mv ${{ needs.metadata.outputs.image-slug }}.tar oci.${{ needs.metadata.outputs.image-slug }}-${{ matrix.platform.arch }}-${{ matrix.platform.os }}.tar
      - uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        if: ${{ inputs.dry-run }}
        with:
          name: oci.${{ needs.metadata.outputs.image-slug }}-${{ matrix.platform.arch }}-${{ matrix.platform.os }}.tar
          path: oci.${{ needs.metadata.outputs.image-slug }}-${{ matrix.platform.arch }}-${{ matrix.platform.os }}.tar

      - uses: cloudposse/github-action-matrix-outputs-write@928e2a2d3d6ae4eb94010827489805c17c81181f # 0.4.2
        if: ${{ !inputs.dry-run }}
        with:
          matrix-step-name: build-${{ needs.metadata.outputs.image-slug }} # unique key for this called workflow
          matrix-key: ${{ matrix.platform.os }}/${{ matrix.platform.arch }}
          outputs: |
            name: ${{ needs.metadata.outputs.image-name }}
            version: ${{ needs.metadata.outputs.image-version }}
            artifact: ghcr.io/${{ github.repository_owner }}/${{ needs.metadata.outputs.image-name }}
            digest: ${{ steps.format-digest.outputs.digest }}
      - uses: cloudposse/github-action-matrix-outputs-write@928e2a2d3d6ae4eb94010827489805c17c81181f # 0.4.2
        if: ${{ inputs.dry-run }}
        with:
          matrix-step-name: build-${{ needs.metadata.outputs.image-slug }} # unique key for this called workflow
          matrix-key: ${{ matrix.platform.os }}/${{ matrix.platform.arch }}
          outputs: |
            name: ${{ needs.metadata.outputs.image-name }}
            name-slug: ${{ needs.metadata.outputs.image-slug }}
            version: ${{ needs.metadata.outputs.image-version }}
            artifact: oci.${{ needs.metadata.outputs.image-slug }}-${{ matrix.platform.arch }}-${{ matrix.platform.os }}.tar
            digest: ${{ steps.format-digest.outputs.digest }}

  vulnerability:
    name: Check for vulnerabilities (${{ inputs.containerfile }})
    permissions:
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: aquasecurity/trivy-action@fbd16365eb88e12433951383f5e99bd901fc618f # 0.12.0
        with:
          exit-code: '1'
          format: sarif
          hide-progress: false
          output: trivy-results.sarif
          scan-ref: ${{ inputs.containerfile }}
          scan-type: config
      - uses: github/codeql-action/upload-sarif@137a1e070d9fce60979b4ba596a335a285a6266b # codeql-bundle-20230418
        if: always()
        with:
          category: trivy-container-syntax
          sarif_file: trivy-results.sarif

  export:
    name: Export generated artifacts (${{ inputs.containerfile }})
    needs: [metadata, build]
    outputs:
      artifacts: ${{ steps.format.outputs.artifacts }}
    permissions: {}
    runs-on: ubuntu-latest
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@ea1c28d66c34b8400391ed74d510f66abc392d5e # 0.1.1
        id: matrix-output
        with:
          matrix-step-name: build-${{ needs.metadata.outputs.image-slug }} # unique key for this called workflow
      - name: Reduce matrix output as JSON list of artifacts
        id: format
        run: |
          (
            echo -n "artifacts="
            echo '${{ steps.matrix-output.outputs.result }}' | \
            jq  --compact-output --sort-keys 'to_entries 
              | map(
                .key as $type
                | .value
                | to_entries[]
                | {platform: .key, ($type): .value}
              )
              | group_by(.platform)
              | map(reduce .[] as $o ({}; . + $o))
              | map(.platform |= (split("/") | {os: .[0], arch: .[1]}))'
          ) | tee --append "${GITHUB_OUTPUT}"

      # NOTE: if this reusable workflow is called from another workflow using matrix strategy, we need
      #       to store somewhere the matrix outputs, so we can use it later in the caller workflow
      - uses: cloudposse/github-action-matrix-outputs-write@928e2a2d3d6ae4eb94010827489805c17c81181f # 0.4.2
        with:
          matrix-step-name: _.images.build
          matrix-key: ${{ inputs.containerfile }}
          outputs: |
            artifacts: ${{ steps.format.outputs.artifacts }}
